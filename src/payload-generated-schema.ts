/* tslint:disable */
/* eslint-disable */
/**
 * This file was automatically generated by Payload.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:db-schema` to regenerate this file.
 */

import type {} from '@payloadcms/db-postgres'
import {
  pgTable,
  index,
  uniqueIndex,
  foreignKey,
  serial,
  varchar,
  jsonb,
  timestamp,
  numeric,
  integer,
  boolean,
  type AnyPgColumn,
  text,
  pgEnum,
} from '@payloadcms/db-postgres/drizzle/pg-core'
import { sql, relations } from '@payloadcms/db-postgres/drizzle'
export const enum_categories_status = pgEnum('enum_categories_status', ['active', 'inactive'])
export const enum_products_status = pgEnum('enum_products_status', ['draft', 'active', 'archived'])
export const enum_product_variants_status = pgEnum('enum_product_variants_status', [
  'active',
  'inactive',
])
export const enum_customers_addresses_type = pgEnum('enum_customers_addresses_type', [
  'shipping',
  'billing',
])
export const enum_customers_addresses_country = pgEnum('enum_customers_addresses_country', [
  'NG',
  'KE',
  'ZA',
  'GH',
  'UG',
  'TZ',
  'ET',
  'MA',
  'EG',
  'DZ',
  'OTHER',
])
export const enum_customers_preferences_currency = pgEnum('enum_customers_preferences_currency', [
  'USD',
  'NGN',
  'KES',
  'ZAR',
  'GHS',
  'UGX',
])
export const enum_customers_preferences_language = pgEnum('enum_customers_preferences_language', [
  'en',
  'fr',
  'ar',
  'sw',
])
export const enum_customers_status = pgEnum('enum_customers_status', [
  'active',
  'inactive',
  'suspended',
])
export const enum_customers_customer_group = pgEnum('enum_customers_customer_group', [
  'regular',
  'vip',
  'wholesale',
])
export const enum_orders_shipping_method = pgEnum('enum_orders_shipping_method', [
  'standard',
  'express',
  'overnight',
  'pickup',
])
export const enum_orders_currency = pgEnum('enum_orders_currency', [
  'USD',
  'NGN',
  'KES',
  'ZAR',
  'GHS',
  'UGX',
])
export const enum_orders_status = pgEnum('enum_orders_status', [
  'pending',
  'confirmed',
  'processing',
  'shipped',
  'delivered',
  'cancelled',
  'refunded',
])
export const enum_orders_payment_status = pgEnum('enum_orders_payment_status', [
  'pending',
  'paid',
  'failed',
  'refunded',
  'partially_refunded',
])
export const enum_orders_payment_method = pgEnum('enum_orders_payment_method', [
  'credit_card',
  'paypal',
  'mpesa',
  'mtn_mobile_money',
  'airtel_money',
  'bank_transfer',
  'cod',
])
export const enum_shopping_cart_currency = pgEnum('enum_shopping_cart_currency', [
  'USD',
  'NGN',
  'KES',
  'ZAR',
  'GHS',
  'UGX',
])
export const enum_shopping_cart_status = pgEnum('enum_shopping_cart_status', [
  'active',
  'abandoned',
  'converted',
])
export const enum_users_role = pgEnum('enum_users_role', ['super_admin', 'admin', 'editor'])
export const enum_redirects_to_type = pgEnum('enum_redirects_to_type', ['reference', 'custom'])
export const enum_forms_confirmation_type = pgEnum('enum_forms_confirmation_type', [
  'message',
  'redirect',
])
export const enum_header_nav_items_link_type = pgEnum('enum_header_nav_items_link_type', [
  'reference',
  'custom',
])
export const enum_footer_nav_items_link_type = pgEnum('enum_footer_nav_items_link_type', [
  'reference',
  'custom',
])

export const media = pgTable(
  'media',
  {
    id: serial('id').primaryKey(),
    alt: varchar('alt'),
    caption: jsonb('caption'),
    prefix: varchar('prefix'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    url: varchar('url'),
    thumbnailURL: varchar('thumbnail_u_r_l'),
    filename: varchar('filename'),
    mimeType: varchar('mime_type'),
    filesize: numeric('filesize'),
    width: numeric('width'),
    height: numeric('height'),
    focalX: numeric('focal_x'),
    focalY: numeric('focal_y'),
    sizes_thumbnail_url: varchar('sizes_thumbnail_url'),
    sizes_thumbnail_width: numeric('sizes_thumbnail_width'),
    sizes_thumbnail_height: numeric('sizes_thumbnail_height'),
    sizes_thumbnail_mimeType: varchar('sizes_thumbnail_mime_type'),
    sizes_thumbnail_filesize: numeric('sizes_thumbnail_filesize'),
    sizes_thumbnail_filename: varchar('sizes_thumbnail_filename'),
    sizes_square_url: varchar('sizes_square_url'),
    sizes_square_width: numeric('sizes_square_width'),
    sizes_square_height: numeric('sizes_square_height'),
    sizes_square_mimeType: varchar('sizes_square_mime_type'),
    sizes_square_filesize: numeric('sizes_square_filesize'),
    sizes_square_filename: varchar('sizes_square_filename'),
    sizes_small_url: varchar('sizes_small_url'),
    sizes_small_width: numeric('sizes_small_width'),
    sizes_small_height: numeric('sizes_small_height'),
    sizes_small_mimeType: varchar('sizes_small_mime_type'),
    sizes_small_filesize: numeric('sizes_small_filesize'),
    sizes_small_filename: varchar('sizes_small_filename'),
    sizes_medium_url: varchar('sizes_medium_url'),
    sizes_medium_width: numeric('sizes_medium_width'),
    sizes_medium_height: numeric('sizes_medium_height'),
    sizes_medium_mimeType: varchar('sizes_medium_mime_type'),
    sizes_medium_filesize: numeric('sizes_medium_filesize'),
    sizes_medium_filename: varchar('sizes_medium_filename'),
    sizes_large_url: varchar('sizes_large_url'),
    sizes_large_width: numeric('sizes_large_width'),
    sizes_large_height: numeric('sizes_large_height'),
    sizes_large_mimeType: varchar('sizes_large_mime_type'),
    sizes_large_filesize: numeric('sizes_large_filesize'),
    sizes_large_filename: varchar('sizes_large_filename'),
    sizes_xlarge_url: varchar('sizes_xlarge_url'),
    sizes_xlarge_width: numeric('sizes_xlarge_width'),
    sizes_xlarge_height: numeric('sizes_xlarge_height'),
    sizes_xlarge_mimeType: varchar('sizes_xlarge_mime_type'),
    sizes_xlarge_filesize: numeric('sizes_xlarge_filesize'),
    sizes_xlarge_filename: varchar('sizes_xlarge_filename'),
    sizes_og_url: varchar('sizes_og_url'),
    sizes_og_width: numeric('sizes_og_width'),
    sizes_og_height: numeric('sizes_og_height'),
    sizes_og_mimeType: varchar('sizes_og_mime_type'),
    sizes_og_filesize: numeric('sizes_og_filesize'),
    sizes_og_filename: varchar('sizes_og_filename'),
  },
  (columns) => ({
    media_updated_at_idx: index('media_updated_at_idx').on(columns.updatedAt),
    media_created_at_idx: index('media_created_at_idx').on(columns.createdAt),
    media_filename_idx: uniqueIndex('media_filename_idx').on(columns.filename),
    media_sizes_thumbnail_sizes_thumbnail_filename_idx: index(
      'media_sizes_thumbnail_sizes_thumbnail_filename_idx',
    ).on(columns.sizes_thumbnail_filename),
    media_sizes_square_sizes_square_filename_idx: index(
      'media_sizes_square_sizes_square_filename_idx',
    ).on(columns.sizes_square_filename),
    media_sizes_small_sizes_small_filename_idx: index(
      'media_sizes_small_sizes_small_filename_idx',
    ).on(columns.sizes_small_filename),
    media_sizes_medium_sizes_medium_filename_idx: index(
      'media_sizes_medium_sizes_medium_filename_idx',
    ).on(columns.sizes_medium_filename),
    media_sizes_large_sizes_large_filename_idx: index(
      'media_sizes_large_sizes_large_filename_idx',
    ).on(columns.sizes_large_filename),
    media_sizes_xlarge_sizes_xlarge_filename_idx: index(
      'media_sizes_xlarge_sizes_xlarge_filename_idx',
    ).on(columns.sizes_xlarge_filename),
    media_sizes_og_sizes_og_filename_idx: index('media_sizes_og_sizes_og_filename_idx').on(
      columns.sizes_og_filename,
    ),
  }),
)

export const categories_breadcrumbs = pgTable(
  'categories_breadcrumbs',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    doc: integer('doc_id').references(() => categories.id, {
      onDelete: 'set null',
    }),
    url: varchar('url'),
    label: varchar('label'),
  },
  (columns) => ({
    _orderIdx: index('categories_breadcrumbs_order_idx').on(columns._order),
    _parentIDIdx: index('categories_breadcrumbs_parent_id_idx').on(columns._parentID),
    categories_breadcrumbs_doc_idx: index('categories_breadcrumbs_doc_idx').on(columns.doc),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [categories.id],
      name: 'categories_breadcrumbs_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const categories = pgTable(
  'categories',
  {
    id: serial('id').primaryKey(),
    title: varchar('title').notNull(),
    slug: varchar('slug'),
    slugLock: boolean('slug_lock').default(true),
    description: varchar('description'),
    parent: integer('parent_id').references((): AnyPgColumn => categories.id, {
      onDelete: 'set null',
    }),
    image: integer('image_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    status: enum_categories_status('status').notNull().default('active'),
    featured: boolean('featured').default(false),
    sortOrder: numeric('sort_order').default('0'),
    breadcrumbPath: varchar('breadcrumb_path'),
    seo_title: varchar('seo_title'),
    seo_description: varchar('seo_description'),
    seo_keywords: varchar('seo_keywords'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    categories_slug_idx: index('categories_slug_idx').on(columns.slug),
    categories_parent_idx: index('categories_parent_idx').on(columns.parent),
    categories_image_idx: index('categories_image_idx').on(columns.image),
    categories_updated_at_idx: index('categories_updated_at_idx').on(columns.updatedAt),
    categories_created_at_idx: index('categories_created_at_idx').on(columns.createdAt),
  }),
)

export const products_images = pgTable(
  'products_images',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    image: integer('image_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    alt: varchar('alt'),
  },
  (columns) => ({
    _orderIdx: index('products_images_order_idx').on(columns._order),
    _parentIDIdx: index('products_images_parent_id_idx').on(columns._parentID),
    products_images_image_idx: index('products_images_image_idx').on(columns.image),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [products.id],
      name: 'products_images_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const products_tags = pgTable(
  'products_tags',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    tag: varchar('tag').notNull(),
  },
  (columns) => ({
    _orderIdx: index('products_tags_order_idx').on(columns._order),
    _parentIDIdx: index('products_tags_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [products.id],
      name: 'products_tags_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const products = pgTable(
  'products',
  {
    id: serial('id').primaryKey(),
    title: varchar('title').notNull(),
    slug: varchar('slug'),
    slugLock: boolean('slug_lock').default(true),
    description: varchar('description').notNull(),
    fullDescription: jsonb('full_description'),
    price: numeric('price').notNull(),
    compareAtPrice: numeric('compare_at_price'),
    sku: varchar('sku').notNull(),
    inventory_trackQuantity: boolean('inventory_track_quantity').default(true),
    inventory_quantity: numeric('inventory_quantity').default('0'),
    inventory_allowBackorder: boolean('inventory_allow_backorder').default(false),
    inventory_lowStockThreshold: numeric('inventory_low_stock_threshold').default('5'),
    status: enum_products_status('status').notNull().default('draft'),
    featured: boolean('featured').default(false),
    weight: numeric('weight'),
    dimensions_length: numeric('dimensions_length'),
    dimensions_width: numeric('dimensions_width'),
    dimensions_height: numeric('dimensions_height'),
    seo_title: varchar('seo_title'),
    seo_description: varchar('seo_description'),
    seo_keywords: varchar('seo_keywords'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    products_slug_idx: index('products_slug_idx').on(columns.slug),
    products_sku_idx: uniqueIndex('products_sku_idx').on(columns.sku),
    products_updated_at_idx: index('products_updated_at_idx').on(columns.updatedAt),
    products_created_at_idx: index('products_created_at_idx').on(columns.createdAt),
  }),
)

export const products_rels = pgTable(
  'products_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    categoriesID: integer('categories_id'),
  },
  (columns) => ({
    order: index('products_rels_order_idx').on(columns.order),
    parentIdx: index('products_rels_parent_idx').on(columns.parent),
    pathIdx: index('products_rels_path_idx').on(columns.path),
    products_rels_categories_id_idx: index('products_rels_categories_id_idx').on(
      columns.categoriesID,
    ),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [products.id],
      name: 'products_rels_parent_fk',
    }).onDelete('cascade'),
    categoriesIdFk: foreignKey({
      columns: [columns['categoriesID']],
      foreignColumns: [categories.id],
      name: 'products_rels_categories_fk',
    }).onDelete('cascade'),
  }),
)

export const product_variants_options = pgTable(
  'product_variants_options',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    name: varchar('name').notNull(),
    value: varchar('value').notNull(),
  },
  (columns) => ({
    _orderIdx: index('product_variants_options_order_idx').on(columns._order),
    _parentIDIdx: index('product_variants_options_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [product_variants.id],
      name: 'product_variants_options_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const product_variants_images = pgTable(
  'product_variants_images',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    image: integer('image_id')
      .notNull()
      .references(() => media.id, {
        onDelete: 'set null',
      }),
    alt: varchar('alt').notNull(),
  },
  (columns) => ({
    _orderIdx: index('product_variants_images_order_idx').on(columns._order),
    _parentIDIdx: index('product_variants_images_parent_id_idx').on(columns._parentID),
    product_variants_images_image_idx: index('product_variants_images_image_idx').on(columns.image),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [product_variants.id],
      name: 'product_variants_images_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const product_variants = pgTable(
  'product_variants',
  {
    id: serial('id').primaryKey(),
    title: varchar('title').notNull(),
    product: integer('product_id')
      .notNull()
      .references(() => products.id, {
        onDelete: 'set null',
      }),
    sku: varchar('sku').notNull(),
    price: numeric('price'),
    compareAtPrice: numeric('compare_at_price'),
    inventory_quantity: numeric('inventory_quantity').default('0'),
    inventory_reserved: numeric('inventory_reserved').default('0'),
    inventory_available: numeric('inventory_available'),
    weight: numeric('weight'),
    isDefault: boolean('is_default').default(false),
    status: enum_product_variants_status('status').notNull().default('active'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    product_variants_product_idx: index('product_variants_product_idx').on(columns.product),
    product_variants_sku_idx: uniqueIndex('product_variants_sku_idx').on(columns.sku),
    product_variants_updated_at_idx: index('product_variants_updated_at_idx').on(columns.updatedAt),
    product_variants_created_at_idx: index('product_variants_created_at_idx').on(columns.createdAt),
  }),
)

export const customers_addresses = pgTable(
  'customers_addresses',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    type: enum_customers_addresses_type('type').notNull(),
    isDefault: boolean('is_default').default(false),
    firstName: varchar('first_name').notNull(),
    lastName: varchar('last_name').notNull(),
    company: varchar('company'),
    address1: varchar('address1').notNull(),
    address2: varchar('address2'),
    city: varchar('city').notNull(),
    state: varchar('state'),
    postalCode: varchar('postal_code').notNull(),
    country: enum_customers_addresses_country('country').notNull(),
  },
  (columns) => ({
    _orderIdx: index('customers_addresses_order_idx').on(columns._order),
    _parentIDIdx: index('customers_addresses_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [customers.id],
      name: 'customers_addresses_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const customers_sessions = pgTable(
  'customers_sessions',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 }),
    expiresAt: timestamp('expires_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }).notNull(),
  },
  (columns) => ({
    _orderIdx: index('customers_sessions_order_idx').on(columns._order),
    _parentIDIdx: index('customers_sessions_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [customers.id],
      name: 'customers_sessions_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const customers = pgTable(
  'customers',
  {
    id: serial('id').primaryKey(),
    firstName: varchar('first_name').notNull(),
    lastName: varchar('last_name').notNull(),
    phone: varchar('phone'),
    dateOfBirth: timestamp('date_of_birth', { mode: 'string', withTimezone: true, precision: 3 }),
    preferences_currency:
      enum_customers_preferences_currency('preferences_currency').default('USD'),
    preferences_language: enum_customers_preferences_language('preferences_language').default('en'),
    preferences_newsletter: boolean('preferences_newsletter').default(false),
    preferences_smsMarketing: boolean('preferences_sms_marketing').default(false),
    status: enum_customers_status('status').notNull().default('active'),
    customerGroup: enum_customers_customer_group('customer_group').default('regular'),
    totalSpent: numeric('total_spent').default('0'),
    totalOrders: numeric('total_orders').default('0'),
    lastOrderDate: timestamp('last_order_date', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    notes: varchar('notes'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    email: varchar('email').notNull(),
    resetPasswordToken: varchar('reset_password_token'),
    resetPasswordExpiration: timestamp('reset_password_expiration', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    salt: varchar('salt'),
    hash: varchar('hash'),
    _verified: boolean('_verified'),
    _verificationToken: varchar('_verificationtoken'),
    loginAttempts: numeric('login_attempts').default('0'),
    lockUntil: timestamp('lock_until', { mode: 'string', withTimezone: true, precision: 3 }),
  },
  (columns) => ({
    customers_updated_at_idx: index('customers_updated_at_idx').on(columns.updatedAt),
    customers_created_at_idx: index('customers_created_at_idx').on(columns.createdAt),
    customers_email_idx: uniqueIndex('customers_email_idx').on(columns.email),
  }),
)

export const orders_items = pgTable(
  'orders_items',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    product: integer('product_id')
      .notNull()
      .references(() => products.id, {
        onDelete: 'set null',
      }),
    variant: integer('variant_id').references(() => product_variants.id, {
      onDelete: 'set null',
    }),
    quantity: numeric('quantity').notNull(),
    unitPrice: numeric('unit_price').notNull(),
    totalPrice: numeric('total_price').notNull(),
    productSnapshot_title: varchar('product_snapshot_title').notNull(),
    productSnapshot_sku: varchar('product_snapshot_sku').notNull(),
    productSnapshot_image: integer('product_snapshot_image_id').references(() => media.id, {
      onDelete: 'set null',
    }),
  },
  (columns) => ({
    _orderIdx: index('orders_items_order_idx').on(columns._order),
    _parentIDIdx: index('orders_items_parent_id_idx').on(columns._parentID),
    orders_items_product_idx: index('orders_items_product_idx').on(columns.product),
    orders_items_variant_idx: index('orders_items_variant_idx').on(columns.variant),
    orders_items_product_snapshot_product_snapshot_image_idx: index(
      'orders_items_product_snapshot_product_snapshot_image_idx',
    ).on(columns.productSnapshot_image),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [orders.id],
      name: 'orders_items_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const orders = pgTable(
  'orders',
  {
    id: serial('id').primaryKey(),
    orderNumber: varchar('order_number').notNull(),
    customer: integer('customer_id')
      .notNull()
      .references(() => customers.id, {
        onDelete: 'set null',
      }),
    subtotal: numeric('subtotal').notNull(),
    shipping_method: enum_orders_shipping_method('shipping_method').notNull(),
    shipping_cost: numeric('shipping_cost').notNull(),
    shipping_address_firstName: varchar('shipping_address_first_name').notNull(),
    shipping_address_lastName: varchar('shipping_address_last_name').notNull(),
    shipping_address_company: varchar('shipping_address_company'),
    shipping_address_address1: varchar('shipping_address_address1').notNull(),
    shipping_address_address2: varchar('shipping_address_address2'),
    shipping_address_city: varchar('shipping_address_city').notNull(),
    shipping_address_state: varchar('shipping_address_state'),
    shipping_address_postalCode: varchar('shipping_address_postal_code').notNull(),
    shipping_address_country: varchar('shipping_address_country').notNull(),
    shipping_address_phone: varchar('shipping_address_phone'),
    shipping_trackingNumber: varchar('shipping_tracking_number'),
    shipping_estimatedDelivery: timestamp('shipping_estimated_delivery', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    billing_address_firstName: varchar('billing_address_first_name').notNull(),
    billing_address_lastName: varchar('billing_address_last_name').notNull(),
    billing_address_company: varchar('billing_address_company'),
    billing_address_address1: varchar('billing_address_address1').notNull(),
    billing_address_address2: varchar('billing_address_address2'),
    billing_address_city: varchar('billing_address_city').notNull(),
    billing_address_state: varchar('billing_address_state'),
    billing_address_postalCode: varchar('billing_address_postal_code').notNull(),
    billing_address_country: varchar('billing_address_country').notNull(),
    tax_amount: numeric('tax_amount').default('0'),
    tax_rate: numeric('tax_rate').default('0'),
    tax_inclusive: boolean('tax_inclusive').default(false),
    total: numeric('total').notNull(),
    currency: enum_orders_currency('currency').notNull().default('USD'),
    status: enum_orders_status('status').notNull().default('pending'),
    paymentStatus: enum_orders_payment_status('payment_status').notNull().default('pending'),
    paymentMethod: enum_orders_payment_method('payment_method'),
    paymentReference: varchar('payment_reference'),
    stripePaymentIntentId: varchar('stripe_payment_intent_id'),
    stripeClientSecret: varchar('stripe_client_secret'),
    notes: varchar('notes'),
    internalNotes: varchar('internal_notes'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    orders_order_number_idx: uniqueIndex('orders_order_number_idx').on(columns.orderNumber),
    orders_customer_idx: index('orders_customer_idx').on(columns.customer),
    orders_updated_at_idx: index('orders_updated_at_idx').on(columns.updatedAt),
    orders_created_at_idx: index('orders_created_at_idx').on(columns.createdAt),
  }),
)

export const shopping_cart_items = pgTable(
  'shopping_cart_items',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    product: integer('product_id')
      .notNull()
      .references(() => products.id, {
        onDelete: 'set null',
      }),
    variant: integer('variant_id').references(() => product_variants.id, {
      onDelete: 'set null',
    }),
    quantity: numeric('quantity').notNull().default('1'),
    unitPrice: numeric('unit_price').notNull(),
    totalPrice: numeric('total_price').notNull(),
    addedAt: timestamp('added_at', { mode: 'string', withTimezone: true, precision: 3 }),
  },
  (columns) => ({
    _orderIdx: index('shopping_cart_items_order_idx').on(columns._order),
    _parentIDIdx: index('shopping_cart_items_parent_id_idx').on(columns._parentID),
    shopping_cart_items_product_idx: index('shopping_cart_items_product_idx').on(columns.product),
    shopping_cart_items_variant_idx: index('shopping_cart_items_variant_idx').on(columns.variant),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [shopping_cart.id],
      name: 'shopping_cart_items_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const shopping_cart = pgTable(
  'shopping_cart',
  {
    id: serial('id').primaryKey(),
    customer: integer('customer_id').references(() => customers.id, {
      onDelete: 'set null',
    }),
    sessionId: varchar('session_id'),
    subtotal: numeric('subtotal').default('0'),
    itemCount: numeric('item_count').default('0'),
    currency: enum_shopping_cart_currency('currency').notNull().default('USD'),
    status: enum_shopping_cart_status('status').notNull().default('active'),
    expiresAt: timestamp('expires_at', { mode: 'string', withTimezone: true, precision: 3 }),
    notes: varchar('notes'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    shopping_cart_customer_idx: index('shopping_cart_customer_idx').on(columns.customer),
    shopping_cart_updated_at_idx: index('shopping_cart_updated_at_idx').on(columns.updatedAt),
    shopping_cart_created_at_idx: index('shopping_cart_created_at_idx').on(columns.createdAt),
  }),
)

export const users_sessions = pgTable(
  'users_sessions',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 }),
    expiresAt: timestamp('expires_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }).notNull(),
  },
  (columns) => ({
    _orderIdx: index('users_sessions_order_idx').on(columns._order),
    _parentIDIdx: index('users_sessions_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [users.id],
      name: 'users_sessions_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const users = pgTable(
  'users',
  {
    id: serial('id').primaryKey(),
    name: varchar('name').notNull(),
    role: enum_users_role('role').default('admin'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    email: varchar('email').notNull(),
    resetPasswordToken: varchar('reset_password_token'),
    resetPasswordExpiration: timestamp('reset_password_expiration', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    salt: varchar('salt'),
    hash: varchar('hash'),
    loginAttempts: numeric('login_attempts').default('0'),
    lockUntil: timestamp('lock_until', { mode: 'string', withTimezone: true, precision: 3 }),
  },
  (columns) => ({
    users_updated_at_idx: index('users_updated_at_idx').on(columns.updatedAt),
    users_created_at_idx: index('users_created_at_idx').on(columns.createdAt),
    users_email_idx: uniqueIndex('users_email_idx').on(columns.email),
  }),
)

export const payload_preferences = pgTable(
  'payload_preferences',
  {
    id: serial('id').primaryKey(),
    key: varchar('key'),
    value: jsonb('value'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    payload_preferences_key_idx: index('payload_preferences_key_idx').on(columns.key),
    payload_preferences_updated_at_1_idx: index('payload_preferences_updated_at_1_idx').on(
      columns.updatedAt,
    ),
    payload_preferences_created_at_1_idx: index('payload_preferences_created_at_1_idx').on(
      columns.createdAt,
    ),
  }),
)

export const redirects = pgTable(
  'redirects',
  {
    id: serial('id').primaryKey(),
    from: varchar('from').notNull(),
    to_type: enum_redirects_to_type('to_type').default('reference'),
    to_url: varchar('to_url'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    redirects_from_idx: uniqueIndex('redirects_from_idx').on(columns.from),
    redirects_updated_at_idx: index('redirects_updated_at_idx').on(columns.updatedAt),
    redirects_created_at_idx: index('redirects_created_at_idx').on(columns.createdAt),
  }),
)

export const redirects_rels = pgTable(
  'redirects_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    productsID: integer('products_id'),
    categoriesID: integer('categories_id'),
  },
  (columns) => ({
    order: index('redirects_rels_order_idx').on(columns.order),
    parentIdx: index('redirects_rels_parent_idx').on(columns.parent),
    pathIdx: index('redirects_rels_path_idx').on(columns.path),
    redirects_rels_products_id_idx: index('redirects_rels_products_id_idx').on(columns.productsID),
    redirects_rels_categories_id_idx: index('redirects_rels_categories_id_idx').on(
      columns.categoriesID,
    ),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [redirects.id],
      name: 'redirects_rels_parent_fk',
    }).onDelete('cascade'),
    productsIdFk: foreignKey({
      columns: [columns['productsID']],
      foreignColumns: [products.id],
      name: 'redirects_rels_products_fk',
    }).onDelete('cascade'),
    categoriesIdFk: foreignKey({
      columns: [columns['categoriesID']],
      foreignColumns: [categories.id],
      name: 'redirects_rels_categories_fk',
    }).onDelete('cascade'),
  }),
)

export const forms_blocks_checkbox = pgTable(
  'forms_blocks_checkbox',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: varchar('id').primaryKey(),
    name: varchar('name').notNull(),
    label: varchar('label'),
    width: numeric('width'),
    required: boolean('required'),
    defaultValue: boolean('default_value'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('forms_blocks_checkbox_order_idx').on(columns._order),
    _parentIDIdx: index('forms_blocks_checkbox_parent_id_idx').on(columns._parentID),
    _pathIdx: index('forms_blocks_checkbox_path_idx').on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [forms.id],
      name: 'forms_blocks_checkbox_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const forms_blocks_country = pgTable(
  'forms_blocks_country',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: varchar('id').primaryKey(),
    name: varchar('name').notNull(),
    label: varchar('label'),
    width: numeric('width'),
    required: boolean('required'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('forms_blocks_country_order_idx').on(columns._order),
    _parentIDIdx: index('forms_blocks_country_parent_id_idx').on(columns._parentID),
    _pathIdx: index('forms_blocks_country_path_idx').on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [forms.id],
      name: 'forms_blocks_country_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const forms_blocks_email = pgTable(
  'forms_blocks_email',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: varchar('id').primaryKey(),
    name: varchar('name').notNull(),
    label: varchar('label'),
    width: numeric('width'),
    required: boolean('required'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('forms_blocks_email_order_idx').on(columns._order),
    _parentIDIdx: index('forms_blocks_email_parent_id_idx').on(columns._parentID),
    _pathIdx: index('forms_blocks_email_path_idx').on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [forms.id],
      name: 'forms_blocks_email_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const forms_blocks_message = pgTable(
  'forms_blocks_message',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: varchar('id').primaryKey(),
    message: jsonb('message'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('forms_blocks_message_order_idx').on(columns._order),
    _parentIDIdx: index('forms_blocks_message_parent_id_idx').on(columns._parentID),
    _pathIdx: index('forms_blocks_message_path_idx').on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [forms.id],
      name: 'forms_blocks_message_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const forms_blocks_number = pgTable(
  'forms_blocks_number',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: varchar('id').primaryKey(),
    name: varchar('name').notNull(),
    label: varchar('label'),
    width: numeric('width'),
    defaultValue: numeric('default_value'),
    required: boolean('required'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('forms_blocks_number_order_idx').on(columns._order),
    _parentIDIdx: index('forms_blocks_number_parent_id_idx').on(columns._parentID),
    _pathIdx: index('forms_blocks_number_path_idx').on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [forms.id],
      name: 'forms_blocks_number_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const forms_blocks_select_options = pgTable(
  'forms_blocks_select_options',
  {
    _order: integer('_order').notNull(),
    _parentID: varchar('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    label: varchar('label').notNull(),
    value: varchar('value').notNull(),
  },
  (columns) => ({
    _orderIdx: index('forms_blocks_select_options_order_idx').on(columns._order),
    _parentIDIdx: index('forms_blocks_select_options_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [forms_blocks_select.id],
      name: 'forms_blocks_select_options_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const forms_blocks_select = pgTable(
  'forms_blocks_select',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: varchar('id').primaryKey(),
    name: varchar('name').notNull(),
    label: varchar('label'),
    width: numeric('width'),
    defaultValue: varchar('default_value'),
    placeholder: varchar('placeholder'),
    required: boolean('required'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('forms_blocks_select_order_idx').on(columns._order),
    _parentIDIdx: index('forms_blocks_select_parent_id_idx').on(columns._parentID),
    _pathIdx: index('forms_blocks_select_path_idx').on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [forms.id],
      name: 'forms_blocks_select_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const forms_blocks_state = pgTable(
  'forms_blocks_state',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: varchar('id').primaryKey(),
    name: varchar('name').notNull(),
    label: varchar('label'),
    width: numeric('width'),
    required: boolean('required'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('forms_blocks_state_order_idx').on(columns._order),
    _parentIDIdx: index('forms_blocks_state_parent_id_idx').on(columns._parentID),
    _pathIdx: index('forms_blocks_state_path_idx').on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [forms.id],
      name: 'forms_blocks_state_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const forms_blocks_text = pgTable(
  'forms_blocks_text',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: varchar('id').primaryKey(),
    name: varchar('name').notNull(),
    label: varchar('label'),
    width: numeric('width'),
    defaultValue: varchar('default_value'),
    required: boolean('required'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('forms_blocks_text_order_idx').on(columns._order),
    _parentIDIdx: index('forms_blocks_text_parent_id_idx').on(columns._parentID),
    _pathIdx: index('forms_blocks_text_path_idx').on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [forms.id],
      name: 'forms_blocks_text_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const forms_blocks_textarea = pgTable(
  'forms_blocks_textarea',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: varchar('id').primaryKey(),
    name: varchar('name').notNull(),
    label: varchar('label'),
    width: numeric('width'),
    defaultValue: varchar('default_value'),
    required: boolean('required'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('forms_blocks_textarea_order_idx').on(columns._order),
    _parentIDIdx: index('forms_blocks_textarea_parent_id_idx').on(columns._parentID),
    _pathIdx: index('forms_blocks_textarea_path_idx').on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [forms.id],
      name: 'forms_blocks_textarea_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const forms_emails = pgTable(
  'forms_emails',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    emailTo: varchar('email_to'),
    cc: varchar('cc'),
    bcc: varchar('bcc'),
    replyTo: varchar('reply_to'),
    emailFrom: varchar('email_from'),
    subject: varchar('subject').notNull().default("You've received a new message."),
    message: jsonb('message'),
  },
  (columns) => ({
    _orderIdx: index('forms_emails_order_idx').on(columns._order),
    _parentIDIdx: index('forms_emails_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [forms.id],
      name: 'forms_emails_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const forms = pgTable(
  'forms',
  {
    id: serial('id').primaryKey(),
    title: varchar('title').notNull(),
    submitButtonLabel: varchar('submit_button_label'),
    confirmationType: enum_forms_confirmation_type('confirmation_type').default('message'),
    confirmationMessage: jsonb('confirmation_message'),
    redirect_url: varchar('redirect_url'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    forms_updated_at_idx: index('forms_updated_at_idx').on(columns.updatedAt),
    forms_created_at_idx: index('forms_created_at_idx').on(columns.createdAt),
  }),
)

export const form_submissions_submission_data = pgTable(
  'form_submissions_submission_data',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    field: varchar('field').notNull(),
    value: varchar('value').notNull(),
  },
  (columns) => ({
    _orderIdx: index('form_submissions_submission_data_order_idx').on(columns._order),
    _parentIDIdx: index('form_submissions_submission_data_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [form_submissions.id],
      name: 'form_submissions_submission_data_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const form_submissions = pgTable(
  'form_submissions',
  {
    id: serial('id').primaryKey(),
    form: integer('form_id')
      .notNull()
      .references(() => forms.id, {
        onDelete: 'set null',
      }),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    form_submissions_form_idx: index('form_submissions_form_idx').on(columns.form),
    form_submissions_updated_at_idx: index('form_submissions_updated_at_idx').on(columns.updatedAt),
    form_submissions_created_at_idx: index('form_submissions_created_at_idx').on(columns.createdAt),
  }),
)

export const search_categories = pgTable(
  'search_categories',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    relationTo: varchar('relation_to'),
    categoryID: varchar('category_i_d'),
    title: varchar('title'),
  },
  (columns) => ({
    _orderIdx: index('search_categories_order_idx').on(columns._order),
    _parentIDIdx: index('search_categories_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [search.id],
      name: 'search_categories_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const search = pgTable(
  'search',
  {
    id: serial('id').primaryKey(),
    title: varchar('title'),
    priority: numeric('priority'),
    slug: varchar('slug'),
    meta_title: varchar('meta_title'),
    meta_description: varchar('meta_description'),
    meta_image: integer('meta_image_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    search_slug_idx: index('search_slug_idx').on(columns.slug),
    search_meta_meta_image_idx: index('search_meta_meta_image_idx').on(columns.meta_image),
    search_updated_at_idx: index('search_updated_at_idx').on(columns.updatedAt),
    search_created_at_idx: index('search_created_at_idx').on(columns.createdAt),
  }),
)

export const search_rels = pgTable(
  'search_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    productsID: integer('products_id'),
  },
  (columns) => ({
    order: index('search_rels_order_idx').on(columns.order),
    parentIdx: index('search_rels_parent_idx').on(columns.parent),
    pathIdx: index('search_rels_path_idx').on(columns.path),
    search_rels_products_id_idx: index('search_rels_products_id_idx').on(columns.productsID),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [search.id],
      name: 'search_rels_parent_fk',
    }).onDelete('cascade'),
    productsIdFk: foreignKey({
      columns: [columns['productsID']],
      foreignColumns: [products.id],
      name: 'search_rels_products_fk',
    }).onDelete('cascade'),
  }),
)

export const payload_locked_documents = pgTable(
  'payload_locked_documents',
  {
    id: serial('id').primaryKey(),
    globalSlug: varchar('global_slug'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    payload_locked_documents_global_slug_idx: index('payload_locked_documents_global_slug_idx').on(
      columns.globalSlug,
    ),
    payload_locked_documents_updated_at_idx: index('payload_locked_documents_updated_at_idx').on(
      columns.updatedAt,
    ),
    payload_locked_documents_created_at_idx: index('payload_locked_documents_created_at_idx').on(
      columns.createdAt,
    ),
  }),
)

export const payload_locked_documents_rels = pgTable(
  'payload_locked_documents_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    mediaID: integer('media_id'),
    categoriesID: integer('categories_id'),
    productsID: integer('products_id'),
    'product-variantsID': integer('product_variants_id'),
    customersID: integer('customers_id'),
    ordersID: integer('orders_id'),
    'shopping-cartID': integer('shopping_cart_id'),
    usersID: integer('users_id'),
    'payload-preferencesID': integer('payload_preferences_id'),
    redirectsID: integer('redirects_id'),
    formsID: integer('forms_id'),
    'form-submissionsID': integer('form_submissions_id'),
    searchID: integer('search_id'),
  },
  (columns) => ({
    order: index('payload_locked_documents_rels_order_idx').on(columns.order),
    parentIdx: index('payload_locked_documents_rels_parent_idx').on(columns.parent),
    pathIdx: index('payload_locked_documents_rels_path_idx').on(columns.path),
    payload_locked_documents_rels_media_id_idx: index(
      'payload_locked_documents_rels_media_id_idx',
    ).on(columns.mediaID),
    payload_locked_documents_rels_categories_id_idx: index(
      'payload_locked_documents_rels_categories_id_idx',
    ).on(columns.categoriesID),
    payload_locked_documents_rels_products_id_idx: index(
      'payload_locked_documents_rels_products_id_idx',
    ).on(columns.productsID),
    payload_locked_documents_rels_product_variants_id_idx: index(
      'payload_locked_documents_rels_product_variants_id_idx',
    ).on(columns['product-variantsID']),
    payload_locked_documents_rels_customers_id_idx: index(
      'payload_locked_documents_rels_customers_id_idx',
    ).on(columns.customersID),
    payload_locked_documents_rels_orders_id_idx: index(
      'payload_locked_documents_rels_orders_id_idx',
    ).on(columns.ordersID),
    payload_locked_documents_rels_shopping_cart_id_idx: index(
      'payload_locked_documents_rels_shopping_cart_id_idx',
    ).on(columns['shopping-cartID']),
    payload_locked_documents_rels_users_id_idx: index(
      'payload_locked_documents_rels_users_id_idx',
    ).on(columns.usersID),
    payload_locked_documents_rels_payload_preferences_id_idx: index(
      'payload_locked_documents_rels_payload_preferences_id_idx',
    ).on(columns['payload-preferencesID']),
    payload_locked_documents_rels_redirects_id_idx: index(
      'payload_locked_documents_rels_redirects_id_idx',
    ).on(columns.redirectsID),
    payload_locked_documents_rels_forms_id_idx: index(
      'payload_locked_documents_rels_forms_id_idx',
    ).on(columns.formsID),
    payload_locked_documents_rels_form_submissions_id_idx: index(
      'payload_locked_documents_rels_form_submissions_id_idx',
    ).on(columns['form-submissionsID']),
    payload_locked_documents_rels_search_id_idx: index(
      'payload_locked_documents_rels_search_id_idx',
    ).on(columns.searchID),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [payload_locked_documents.id],
      name: 'payload_locked_documents_rels_parent_fk',
    }).onDelete('cascade'),
    mediaIdFk: foreignKey({
      columns: [columns['mediaID']],
      foreignColumns: [media.id],
      name: 'payload_locked_documents_rels_media_fk',
    }).onDelete('cascade'),
    categoriesIdFk: foreignKey({
      columns: [columns['categoriesID']],
      foreignColumns: [categories.id],
      name: 'payload_locked_documents_rels_categories_fk',
    }).onDelete('cascade'),
    productsIdFk: foreignKey({
      columns: [columns['productsID']],
      foreignColumns: [products.id],
      name: 'payload_locked_documents_rels_products_fk',
    }).onDelete('cascade'),
    'product-variantsIdFk': foreignKey({
      columns: [columns['product-variantsID']],
      foreignColumns: [product_variants.id],
      name: 'payload_locked_documents_rels_product_variants_fk',
    }).onDelete('cascade'),
    customersIdFk: foreignKey({
      columns: [columns['customersID']],
      foreignColumns: [customers.id],
      name: 'payload_locked_documents_rels_customers_fk',
    }).onDelete('cascade'),
    ordersIdFk: foreignKey({
      columns: [columns['ordersID']],
      foreignColumns: [orders.id],
      name: 'payload_locked_documents_rels_orders_fk',
    }).onDelete('cascade'),
    'shopping-cartIdFk': foreignKey({
      columns: [columns['shopping-cartID']],
      foreignColumns: [shopping_cart.id],
      name: 'payload_locked_documents_rels_shopping_cart_fk',
    }).onDelete('cascade'),
    usersIdFk: foreignKey({
      columns: [columns['usersID']],
      foreignColumns: [users.id],
      name: 'payload_locked_documents_rels_users_fk',
    }).onDelete('cascade'),
    'payload-preferencesIdFk': foreignKey({
      columns: [columns['payload-preferencesID']],
      foreignColumns: [payload_preferences.id],
      name: 'payload_locked_documents_rels_payload_preferences_fk',
    }).onDelete('cascade'),
    redirectsIdFk: foreignKey({
      columns: [columns['redirectsID']],
      foreignColumns: [redirects.id],
      name: 'payload_locked_documents_rels_redirects_fk',
    }).onDelete('cascade'),
    formsIdFk: foreignKey({
      columns: [columns['formsID']],
      foreignColumns: [forms.id],
      name: 'payload_locked_documents_rels_forms_fk',
    }).onDelete('cascade'),
    'form-submissionsIdFk': foreignKey({
      columns: [columns['form-submissionsID']],
      foreignColumns: [form_submissions.id],
      name: 'payload_locked_documents_rels_form_submissions_fk',
    }).onDelete('cascade'),
    searchIdFk: foreignKey({
      columns: [columns['searchID']],
      foreignColumns: [search.id],
      name: 'payload_locked_documents_rels_search_fk',
    }).onDelete('cascade'),
  }),
)

export const payload_preferences_rels = pgTable(
  'payload_preferences_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    customersID: integer('customers_id'),
    usersID: integer('users_id'),
  },
  (columns) => ({
    order: index('payload_preferences_rels_order_idx').on(columns.order),
    parentIdx: index('payload_preferences_rels_parent_idx').on(columns.parent),
    pathIdx: index('payload_preferences_rels_path_idx').on(columns.path),
    payload_preferences_rels_customers_id_idx: index(
      'payload_preferences_rels_customers_id_idx',
    ).on(columns.customersID),
    payload_preferences_rels_users_id_idx: index('payload_preferences_rels_users_id_idx').on(
      columns.usersID,
    ),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [payload_preferences.id],
      name: 'payload_preferences_rels_parent_fk',
    }).onDelete('cascade'),
    customersIdFk: foreignKey({
      columns: [columns['customersID']],
      foreignColumns: [customers.id],
      name: 'payload_preferences_rels_customers_fk',
    }).onDelete('cascade'),
    usersIdFk: foreignKey({
      columns: [columns['usersID']],
      foreignColumns: [users.id],
      name: 'payload_preferences_rels_users_fk',
    }).onDelete('cascade'),
  }),
)

export const payload_migrations = pgTable(
  'payload_migrations',
  {
    id: serial('id').primaryKey(),
    name: varchar('name'),
    batch: numeric('batch'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    payload_migrations_updated_at_idx: index('payload_migrations_updated_at_idx').on(
      columns.updatedAt,
    ),
    payload_migrations_created_at_idx: index('payload_migrations_created_at_idx').on(
      columns.createdAt,
    ),
  }),
)

export const header_nav_items = pgTable(
  'header_nav_items',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    link_type: enum_header_nav_items_link_type('link_type').default('reference'),
    link_newTab: boolean('link_new_tab'),
    link_url: varchar('link_url'),
    link_label: varchar('link_label').notNull(),
  },
  (columns) => ({
    _orderIdx: index('header_nav_items_order_idx').on(columns._order),
    _parentIDIdx: index('header_nav_items_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [header.id],
      name: 'header_nav_items_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const header = pgTable('header', {
  id: serial('id').primaryKey(),
  updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 }),
  createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 }),
})

export const header_rels = pgTable(
  'header_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    productsID: integer('products_id'),
    categoriesID: integer('categories_id'),
  },
  (columns) => ({
    order: index('header_rels_order_idx').on(columns.order),
    parentIdx: index('header_rels_parent_idx').on(columns.parent),
    pathIdx: index('header_rels_path_idx').on(columns.path),
    header_rels_products_id_idx: index('header_rels_products_id_idx').on(columns.productsID),
    header_rels_categories_id_idx: index('header_rels_categories_id_idx').on(columns.categoriesID),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [header.id],
      name: 'header_rels_parent_fk',
    }).onDelete('cascade'),
    productsIdFk: foreignKey({
      columns: [columns['productsID']],
      foreignColumns: [products.id],
      name: 'header_rels_products_fk',
    }).onDelete('cascade'),
    categoriesIdFk: foreignKey({
      columns: [columns['categoriesID']],
      foreignColumns: [categories.id],
      name: 'header_rels_categories_fk',
    }).onDelete('cascade'),
  }),
)

export const footer_nav_items = pgTable(
  'footer_nav_items',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    link_type: enum_footer_nav_items_link_type('link_type').default('reference'),
    link_newTab: boolean('link_new_tab'),
    link_url: varchar('link_url'),
    link_label: varchar('link_label').notNull(),
  },
  (columns) => ({
    _orderIdx: index('footer_nav_items_order_idx').on(columns._order),
    _parentIDIdx: index('footer_nav_items_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [footer.id],
      name: 'footer_nav_items_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const footer = pgTable('footer', {
  id: serial('id').primaryKey(),
  updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 }),
  createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 }),
})

export const footer_rels = pgTable(
  'footer_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    productsID: integer('products_id'),
    categoriesID: integer('categories_id'),
  },
  (columns) => ({
    order: index('footer_rels_order_idx').on(columns.order),
    parentIdx: index('footer_rels_parent_idx').on(columns.parent),
    pathIdx: index('footer_rels_path_idx').on(columns.path),
    footer_rels_products_id_idx: index('footer_rels_products_id_idx').on(columns.productsID),
    footer_rels_categories_id_idx: index('footer_rels_categories_id_idx').on(columns.categoriesID),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [footer.id],
      name: 'footer_rels_parent_fk',
    }).onDelete('cascade'),
    productsIdFk: foreignKey({
      columns: [columns['productsID']],
      foreignColumns: [products.id],
      name: 'footer_rels_products_fk',
    }).onDelete('cascade'),
    categoriesIdFk: foreignKey({
      columns: [columns['categoriesID']],
      foreignColumns: [categories.id],
      name: 'footer_rels_categories_fk',
    }).onDelete('cascade'),
  }),
)

export const relations_media = relations(media, () => ({}))
export const relations_categories_breadcrumbs = relations(categories_breadcrumbs, ({ one }) => ({
  _parentID: one(categories, {
    fields: [categories_breadcrumbs._parentID],
    references: [categories.id],
    relationName: 'breadcrumbs',
  }),
  doc: one(categories, {
    fields: [categories_breadcrumbs.doc],
    references: [categories.id],
    relationName: 'doc',
  }),
}))
export const relations_categories = relations(categories, ({ one, many }) => ({
  parent: one(categories, {
    fields: [categories.parent],
    references: [categories.id],
    relationName: 'parent',
  }),
  image: one(media, {
    fields: [categories.image],
    references: [media.id],
    relationName: 'image',
  }),
  breadcrumbs: many(categories_breadcrumbs, {
    relationName: 'breadcrumbs',
  }),
}))
export const relations_products_images = relations(products_images, ({ one }) => ({
  _parentID: one(products, {
    fields: [products_images._parentID],
    references: [products.id],
    relationName: 'images',
  }),
  image: one(media, {
    fields: [products_images.image],
    references: [media.id],
    relationName: 'image',
  }),
}))
export const relations_products_tags = relations(products_tags, ({ one }) => ({
  _parentID: one(products, {
    fields: [products_tags._parentID],
    references: [products.id],
    relationName: 'tags',
  }),
}))
export const relations_products_rels = relations(products_rels, ({ one }) => ({
  parent: one(products, {
    fields: [products_rels.parent],
    references: [products.id],
    relationName: '_rels',
  }),
  categoriesID: one(categories, {
    fields: [products_rels.categoriesID],
    references: [categories.id],
    relationName: 'categories',
  }),
}))
export const relations_products = relations(products, ({ many }) => ({
  images: many(products_images, {
    relationName: 'images',
  }),
  tags: many(products_tags, {
    relationName: 'tags',
  }),
  _rels: many(products_rels, {
    relationName: '_rels',
  }),
}))
export const relations_product_variants_options = relations(
  product_variants_options,
  ({ one }) => ({
    _parentID: one(product_variants, {
      fields: [product_variants_options._parentID],
      references: [product_variants.id],
      relationName: 'options',
    }),
  }),
)
export const relations_product_variants_images = relations(product_variants_images, ({ one }) => ({
  _parentID: one(product_variants, {
    fields: [product_variants_images._parentID],
    references: [product_variants.id],
    relationName: 'images',
  }),
  image: one(media, {
    fields: [product_variants_images.image],
    references: [media.id],
    relationName: 'image',
  }),
}))
export const relations_product_variants = relations(product_variants, ({ one, many }) => ({
  product: one(products, {
    fields: [product_variants.product],
    references: [products.id],
    relationName: 'product',
  }),
  options: many(product_variants_options, {
    relationName: 'options',
  }),
  images: many(product_variants_images, {
    relationName: 'images',
  }),
}))
export const relations_customers_addresses = relations(customers_addresses, ({ one }) => ({
  _parentID: one(customers, {
    fields: [customers_addresses._parentID],
    references: [customers.id],
    relationName: 'addresses',
  }),
}))
export const relations_customers_sessions = relations(customers_sessions, ({ one }) => ({
  _parentID: one(customers, {
    fields: [customers_sessions._parentID],
    references: [customers.id],
    relationName: 'sessions',
  }),
}))
export const relations_customers = relations(customers, ({ many }) => ({
  addresses: many(customers_addresses, {
    relationName: 'addresses',
  }),
  sessions: many(customers_sessions, {
    relationName: 'sessions',
  }),
}))
export const relations_orders_items = relations(orders_items, ({ one }) => ({
  _parentID: one(orders, {
    fields: [orders_items._parentID],
    references: [orders.id],
    relationName: 'items',
  }),
  product: one(products, {
    fields: [orders_items.product],
    references: [products.id],
    relationName: 'product',
  }),
  variant: one(product_variants, {
    fields: [orders_items.variant],
    references: [product_variants.id],
    relationName: 'variant',
  }),
  productSnapshot_image: one(media, {
    fields: [orders_items.productSnapshot_image],
    references: [media.id],
    relationName: 'productSnapshot_image',
  }),
}))
export const relations_orders = relations(orders, ({ one, many }) => ({
  customer: one(customers, {
    fields: [orders.customer],
    references: [customers.id],
    relationName: 'customer',
  }),
  items: many(orders_items, {
    relationName: 'items',
  }),
}))
export const relations_shopping_cart_items = relations(shopping_cart_items, ({ one }) => ({
  _parentID: one(shopping_cart, {
    fields: [shopping_cart_items._parentID],
    references: [shopping_cart.id],
    relationName: 'items',
  }),
  product: one(products, {
    fields: [shopping_cart_items.product],
    references: [products.id],
    relationName: 'product',
  }),
  variant: one(product_variants, {
    fields: [shopping_cart_items.variant],
    references: [product_variants.id],
    relationName: 'variant',
  }),
}))
export const relations_shopping_cart = relations(shopping_cart, ({ one, many }) => ({
  customer: one(customers, {
    fields: [shopping_cart.customer],
    references: [customers.id],
    relationName: 'customer',
  }),
  items: many(shopping_cart_items, {
    relationName: 'items',
  }),
}))
export const relations_users_sessions = relations(users_sessions, ({ one }) => ({
  _parentID: one(users, {
    fields: [users_sessions._parentID],
    references: [users.id],
    relationName: 'sessions',
  }),
}))
export const relations_users = relations(users, ({ many }) => ({
  sessions: many(users_sessions, {
    relationName: 'sessions',
  }),
}))
export const relations_payload_preferences = relations(payload_preferences, ({ many }) => ({
  _rels: many(payload_preferences_rels, {
    relationName: '_rels',
  }),
}))
export const relations_redirects_rels = relations(redirects_rels, ({ one }) => ({
  parent: one(redirects, {
    fields: [redirects_rels.parent],
    references: [redirects.id],
    relationName: '_rels',
  }),
  productsID: one(products, {
    fields: [redirects_rels.productsID],
    references: [products.id],
    relationName: 'products',
  }),
  categoriesID: one(categories, {
    fields: [redirects_rels.categoriesID],
    references: [categories.id],
    relationName: 'categories',
  }),
}))
export const relations_redirects = relations(redirects, ({ many }) => ({
  _rels: many(redirects_rels, {
    relationName: '_rels',
  }),
}))
export const relations_forms_blocks_checkbox = relations(forms_blocks_checkbox, ({ one }) => ({
  _parentID: one(forms, {
    fields: [forms_blocks_checkbox._parentID],
    references: [forms.id],
    relationName: '_blocks_checkbox',
  }),
}))
export const relations_forms_blocks_country = relations(forms_blocks_country, ({ one }) => ({
  _parentID: one(forms, {
    fields: [forms_blocks_country._parentID],
    references: [forms.id],
    relationName: '_blocks_country',
  }),
}))
export const relations_forms_blocks_email = relations(forms_blocks_email, ({ one }) => ({
  _parentID: one(forms, {
    fields: [forms_blocks_email._parentID],
    references: [forms.id],
    relationName: '_blocks_email',
  }),
}))
export const relations_forms_blocks_message = relations(forms_blocks_message, ({ one }) => ({
  _parentID: one(forms, {
    fields: [forms_blocks_message._parentID],
    references: [forms.id],
    relationName: '_blocks_message',
  }),
}))
export const relations_forms_blocks_number = relations(forms_blocks_number, ({ one }) => ({
  _parentID: one(forms, {
    fields: [forms_blocks_number._parentID],
    references: [forms.id],
    relationName: '_blocks_number',
  }),
}))
export const relations_forms_blocks_select_options = relations(
  forms_blocks_select_options,
  ({ one }) => ({
    _parentID: one(forms_blocks_select, {
      fields: [forms_blocks_select_options._parentID],
      references: [forms_blocks_select.id],
      relationName: 'options',
    }),
  }),
)
export const relations_forms_blocks_select = relations(forms_blocks_select, ({ one, many }) => ({
  _parentID: one(forms, {
    fields: [forms_blocks_select._parentID],
    references: [forms.id],
    relationName: '_blocks_select',
  }),
  options: many(forms_blocks_select_options, {
    relationName: 'options',
  }),
}))
export const relations_forms_blocks_state = relations(forms_blocks_state, ({ one }) => ({
  _parentID: one(forms, {
    fields: [forms_blocks_state._parentID],
    references: [forms.id],
    relationName: '_blocks_state',
  }),
}))
export const relations_forms_blocks_text = relations(forms_blocks_text, ({ one }) => ({
  _parentID: one(forms, {
    fields: [forms_blocks_text._parentID],
    references: [forms.id],
    relationName: '_blocks_text',
  }),
}))
export const relations_forms_blocks_textarea = relations(forms_blocks_textarea, ({ one }) => ({
  _parentID: one(forms, {
    fields: [forms_blocks_textarea._parentID],
    references: [forms.id],
    relationName: '_blocks_textarea',
  }),
}))
export const relations_forms_emails = relations(forms_emails, ({ one }) => ({
  _parentID: one(forms, {
    fields: [forms_emails._parentID],
    references: [forms.id],
    relationName: 'emails',
  }),
}))
export const relations_forms = relations(forms, ({ many }) => ({
  _blocks_checkbox: many(forms_blocks_checkbox, {
    relationName: '_blocks_checkbox',
  }),
  _blocks_country: many(forms_blocks_country, {
    relationName: '_blocks_country',
  }),
  _blocks_email: many(forms_blocks_email, {
    relationName: '_blocks_email',
  }),
  _blocks_message: many(forms_blocks_message, {
    relationName: '_blocks_message',
  }),
  _blocks_number: many(forms_blocks_number, {
    relationName: '_blocks_number',
  }),
  _blocks_select: many(forms_blocks_select, {
    relationName: '_blocks_select',
  }),
  _blocks_state: many(forms_blocks_state, {
    relationName: '_blocks_state',
  }),
  _blocks_text: many(forms_blocks_text, {
    relationName: '_blocks_text',
  }),
  _blocks_textarea: many(forms_blocks_textarea, {
    relationName: '_blocks_textarea',
  }),
  emails: many(forms_emails, {
    relationName: 'emails',
  }),
}))
export const relations_form_submissions_submission_data = relations(
  form_submissions_submission_data,
  ({ one }) => ({
    _parentID: one(form_submissions, {
      fields: [form_submissions_submission_data._parentID],
      references: [form_submissions.id],
      relationName: 'submissionData',
    }),
  }),
)
export const relations_form_submissions = relations(form_submissions, ({ one, many }) => ({
  form: one(forms, {
    fields: [form_submissions.form],
    references: [forms.id],
    relationName: 'form',
  }),
  submissionData: many(form_submissions_submission_data, {
    relationName: 'submissionData',
  }),
}))
export const relations_search_categories = relations(search_categories, ({ one }) => ({
  _parentID: one(search, {
    fields: [search_categories._parentID],
    references: [search.id],
    relationName: 'categories',
  }),
}))
export const relations_search_rels = relations(search_rels, ({ one }) => ({
  parent: one(search, {
    fields: [search_rels.parent],
    references: [search.id],
    relationName: '_rels',
  }),
  productsID: one(products, {
    fields: [search_rels.productsID],
    references: [products.id],
    relationName: 'products',
  }),
}))
export const relations_search = relations(search, ({ one, many }) => ({
  meta_image: one(media, {
    fields: [search.meta_image],
    references: [media.id],
    relationName: 'meta_image',
  }),
  categories: many(search_categories, {
    relationName: 'categories',
  }),
  _rels: many(search_rels, {
    relationName: '_rels',
  }),
}))
export const relations_payload_locked_documents_rels = relations(
  payload_locked_documents_rels,
  ({ one }) => ({
    parent: one(payload_locked_documents, {
      fields: [payload_locked_documents_rels.parent],
      references: [payload_locked_documents.id],
      relationName: '_rels',
    }),
    mediaID: one(media, {
      fields: [payload_locked_documents_rels.mediaID],
      references: [media.id],
      relationName: 'media',
    }),
    categoriesID: one(categories, {
      fields: [payload_locked_documents_rels.categoriesID],
      references: [categories.id],
      relationName: 'categories',
    }),
    productsID: one(products, {
      fields: [payload_locked_documents_rels.productsID],
      references: [products.id],
      relationName: 'products',
    }),
    'product-variantsID': one(product_variants, {
      fields: [payload_locked_documents_rels['product-variantsID']],
      references: [product_variants.id],
      relationName: 'product-variants',
    }),
    customersID: one(customers, {
      fields: [payload_locked_documents_rels.customersID],
      references: [customers.id],
      relationName: 'customers',
    }),
    ordersID: one(orders, {
      fields: [payload_locked_documents_rels.ordersID],
      references: [orders.id],
      relationName: 'orders',
    }),
    'shopping-cartID': one(shopping_cart, {
      fields: [payload_locked_documents_rels['shopping-cartID']],
      references: [shopping_cart.id],
      relationName: 'shopping-cart',
    }),
    usersID: one(users, {
      fields: [payload_locked_documents_rels.usersID],
      references: [users.id],
      relationName: 'users',
    }),
    'payload-preferencesID': one(payload_preferences, {
      fields: [payload_locked_documents_rels['payload-preferencesID']],
      references: [payload_preferences.id],
      relationName: 'payload-preferences',
    }),
    redirectsID: one(redirects, {
      fields: [payload_locked_documents_rels.redirectsID],
      references: [redirects.id],
      relationName: 'redirects',
    }),
    formsID: one(forms, {
      fields: [payload_locked_documents_rels.formsID],
      references: [forms.id],
      relationName: 'forms',
    }),
    'form-submissionsID': one(form_submissions, {
      fields: [payload_locked_documents_rels['form-submissionsID']],
      references: [form_submissions.id],
      relationName: 'form-submissions',
    }),
    searchID: one(search, {
      fields: [payload_locked_documents_rels.searchID],
      references: [search.id],
      relationName: 'search',
    }),
  }),
)
export const relations_payload_locked_documents = relations(
  payload_locked_documents,
  ({ many }) => ({
    _rels: many(payload_locked_documents_rels, {
      relationName: '_rels',
    }),
  }),
)
export const relations_payload_preferences_rels = relations(
  payload_preferences_rels,
  ({ one }) => ({
    parent: one(payload_preferences, {
      fields: [payload_preferences_rels.parent],
      references: [payload_preferences.id],
      relationName: '_rels',
    }),
    customersID: one(customers, {
      fields: [payload_preferences_rels.customersID],
      references: [customers.id],
      relationName: 'customers',
    }),
    usersID: one(users, {
      fields: [payload_preferences_rels.usersID],
      references: [users.id],
      relationName: 'users',
    }),
  }),
)
export const relations_payload_migrations = relations(payload_migrations, () => ({}))
export const relations_header_nav_items = relations(header_nav_items, ({ one }) => ({
  _parentID: one(header, {
    fields: [header_nav_items._parentID],
    references: [header.id],
    relationName: 'navItems',
  }),
}))
export const relations_header_rels = relations(header_rels, ({ one }) => ({
  parent: one(header, {
    fields: [header_rels.parent],
    references: [header.id],
    relationName: '_rels',
  }),
  productsID: one(products, {
    fields: [header_rels.productsID],
    references: [products.id],
    relationName: 'products',
  }),
  categoriesID: one(categories, {
    fields: [header_rels.categoriesID],
    references: [categories.id],
    relationName: 'categories',
  }),
}))
export const relations_header = relations(header, ({ many }) => ({
  navItems: many(header_nav_items, {
    relationName: 'navItems',
  }),
  _rels: many(header_rels, {
    relationName: '_rels',
  }),
}))
export const relations_footer_nav_items = relations(footer_nav_items, ({ one }) => ({
  _parentID: one(footer, {
    fields: [footer_nav_items._parentID],
    references: [footer.id],
    relationName: 'navItems',
  }),
}))
export const relations_footer_rels = relations(footer_rels, ({ one }) => ({
  parent: one(footer, {
    fields: [footer_rels.parent],
    references: [footer.id],
    relationName: '_rels',
  }),
  productsID: one(products, {
    fields: [footer_rels.productsID],
    references: [products.id],
    relationName: 'products',
  }),
  categoriesID: one(categories, {
    fields: [footer_rels.categoriesID],
    references: [categories.id],
    relationName: 'categories',
  }),
}))
export const relations_footer = relations(footer, ({ many }) => ({
  navItems: many(footer_nav_items, {
    relationName: 'navItems',
  }),
  _rels: many(footer_rels, {
    relationName: '_rels',
  }),
}))

type DatabaseSchema = {
  enum_categories_status: typeof enum_categories_status
  enum_products_status: typeof enum_products_status
  enum_product_variants_status: typeof enum_product_variants_status
  enum_customers_addresses_type: typeof enum_customers_addresses_type
  enum_customers_addresses_country: typeof enum_customers_addresses_country
  enum_customers_preferences_currency: typeof enum_customers_preferences_currency
  enum_customers_preferences_language: typeof enum_customers_preferences_language
  enum_customers_status: typeof enum_customers_status
  enum_customers_customer_group: typeof enum_customers_customer_group
  enum_orders_shipping_method: typeof enum_orders_shipping_method
  enum_orders_currency: typeof enum_orders_currency
  enum_orders_status: typeof enum_orders_status
  enum_orders_payment_status: typeof enum_orders_payment_status
  enum_orders_payment_method: typeof enum_orders_payment_method
  enum_shopping_cart_currency: typeof enum_shopping_cart_currency
  enum_shopping_cart_status: typeof enum_shopping_cart_status
  enum_users_role: typeof enum_users_role
  enum_redirects_to_type: typeof enum_redirects_to_type
  enum_forms_confirmation_type: typeof enum_forms_confirmation_type
  enum_header_nav_items_link_type: typeof enum_header_nav_items_link_type
  enum_footer_nav_items_link_type: typeof enum_footer_nav_items_link_type
  media: typeof media
  categories_breadcrumbs: typeof categories_breadcrumbs
  categories: typeof categories
  products_images: typeof products_images
  products_tags: typeof products_tags
  products: typeof products
  products_rels: typeof products_rels
  product_variants_options: typeof product_variants_options
  product_variants_images: typeof product_variants_images
  product_variants: typeof product_variants
  customers_addresses: typeof customers_addresses
  customers_sessions: typeof customers_sessions
  customers: typeof customers
  orders_items: typeof orders_items
  orders: typeof orders
  shopping_cart_items: typeof shopping_cart_items
  shopping_cart: typeof shopping_cart
  users_sessions: typeof users_sessions
  users: typeof users
  payload_preferences: typeof payload_preferences
  redirects: typeof redirects
  redirects_rels: typeof redirects_rels
  forms_blocks_checkbox: typeof forms_blocks_checkbox
  forms_blocks_country: typeof forms_blocks_country
  forms_blocks_email: typeof forms_blocks_email
  forms_blocks_message: typeof forms_blocks_message
  forms_blocks_number: typeof forms_blocks_number
  forms_blocks_select_options: typeof forms_blocks_select_options
  forms_blocks_select: typeof forms_blocks_select
  forms_blocks_state: typeof forms_blocks_state
  forms_blocks_text: typeof forms_blocks_text
  forms_blocks_textarea: typeof forms_blocks_textarea
  forms_emails: typeof forms_emails
  forms: typeof forms
  form_submissions_submission_data: typeof form_submissions_submission_data
  form_submissions: typeof form_submissions
  search_categories: typeof search_categories
  search: typeof search
  search_rels: typeof search_rels
  payload_locked_documents: typeof payload_locked_documents
  payload_locked_documents_rels: typeof payload_locked_documents_rels
  payload_preferences_rels: typeof payload_preferences_rels
  payload_migrations: typeof payload_migrations
  header_nav_items: typeof header_nav_items
  header: typeof header
  header_rels: typeof header_rels
  footer_nav_items: typeof footer_nav_items
  footer: typeof footer
  footer_rels: typeof footer_rels
  relations_media: typeof relations_media
  relations_categories_breadcrumbs: typeof relations_categories_breadcrumbs
  relations_categories: typeof relations_categories
  relations_products_images: typeof relations_products_images
  relations_products_tags: typeof relations_products_tags
  relations_products_rels: typeof relations_products_rels
  relations_products: typeof relations_products
  relations_product_variants_options: typeof relations_product_variants_options
  relations_product_variants_images: typeof relations_product_variants_images
  relations_product_variants: typeof relations_product_variants
  relations_customers_addresses: typeof relations_customers_addresses
  relations_customers_sessions: typeof relations_customers_sessions
  relations_customers: typeof relations_customers
  relations_orders_items: typeof relations_orders_items
  relations_orders: typeof relations_orders
  relations_shopping_cart_items: typeof relations_shopping_cart_items
  relations_shopping_cart: typeof relations_shopping_cart
  relations_users_sessions: typeof relations_users_sessions
  relations_users: typeof relations_users
  relations_payload_preferences: typeof relations_payload_preferences
  relations_redirects_rels: typeof relations_redirects_rels
  relations_redirects: typeof relations_redirects
  relations_forms_blocks_checkbox: typeof relations_forms_blocks_checkbox
  relations_forms_blocks_country: typeof relations_forms_blocks_country
  relations_forms_blocks_email: typeof relations_forms_blocks_email
  relations_forms_blocks_message: typeof relations_forms_blocks_message
  relations_forms_blocks_number: typeof relations_forms_blocks_number
  relations_forms_blocks_select_options: typeof relations_forms_blocks_select_options
  relations_forms_blocks_select: typeof relations_forms_blocks_select
  relations_forms_blocks_state: typeof relations_forms_blocks_state
  relations_forms_blocks_text: typeof relations_forms_blocks_text
  relations_forms_blocks_textarea: typeof relations_forms_blocks_textarea
  relations_forms_emails: typeof relations_forms_emails
  relations_forms: typeof relations_forms
  relations_form_submissions_submission_data: typeof relations_form_submissions_submission_data
  relations_form_submissions: typeof relations_form_submissions
  relations_search_categories: typeof relations_search_categories
  relations_search_rels: typeof relations_search_rels
  relations_search: typeof relations_search
  relations_payload_locked_documents_rels: typeof relations_payload_locked_documents_rels
  relations_payload_locked_documents: typeof relations_payload_locked_documents
  relations_payload_preferences_rels: typeof relations_payload_preferences_rels
  relations_payload_migrations: typeof relations_payload_migrations
  relations_header_nav_items: typeof relations_header_nav_items
  relations_header_rels: typeof relations_header_rels
  relations_header: typeof relations_header
  relations_footer_nav_items: typeof relations_footer_nav_items
  relations_footer_rels: typeof relations_footer_rels
  relations_footer: typeof relations_footer
}

declare module '@payloadcms/db-postgres' {
  export interface GeneratedDatabaseSchema {
    schema: DatabaseSchema
  }
}
